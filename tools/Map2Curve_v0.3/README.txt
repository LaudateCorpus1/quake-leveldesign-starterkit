
        ++===========++
        || Map2Curve ||
        ++===========++

       Version: 0.3
       Release: May 15, 2019
        Author: ToTac
       Contact: totac@web.de
       Website: http://gibshooter.com/
 Documentation: http://gibshooter.com/map2curve/documentation
Special Thanks: ribcage

PREAMBLE
   This program lets you generate arcs from Goldsource map files. It works by dropping map or txt
   files onto the programs executable.
   Map files will have to match certain criteria, see below for further informations.
   Also since the tool can not read Goldsource WAD files, you will have to create custom text files, that
   contain the needed texture informations for the program to function properly. See the WAD folder for
   further information.

BUG REPORTS
   Please report any bugs and feature requests to my above mentionend E-Mail, including the specific files
   (map and config file) and other relevant information (e.g. Operating System).


Program Executable

1. Arcs are being generated by dropping map or text files with valid commands and values onto the executable.
2. Multiple files can be dropped onto the exe at once. They will be processed one after another.

Settings-File

1. Has to have same name as Map-File.
2. Any other text than commands and respective values has to be commented out -> "// Text Text Text"
3. At least one "rad" command has to be inside of a settings-file.

   Valid Commands:
   - rad (radius - at least one is REQUIRED!)
   - offset (additional offset on top of radius)
   - res (resolution/number of arc sides)
   - type (type of construction circle)
   - shift (method of horizontal texture offset calculation)
   - obj (wether or not obj file will be exported)
   - height (custom height added to each section)
   - ramp (ramp-mode in addition to custom height, 1 = linear, 2 = smooth)
   - tri (turns generated brushes into wedges/triangles; obligatory for ramp generation)
   - round (rounds generated coordinates to integer numbers)
   - ramptex (0 = OFF, 1 = uses alternative texture align for ramp generation)
   - p_reverse (0 = OFF, 1 = reverses direction of a path)
   - p_cornerfix (0 = OFF, 1 = fixes overlapping corners of a path)
   - p_split (0 = OFF, 1 = path objects are being split into smaller pieces on export)

   See the online documentation for further explanations and a full command list.

WAD-Directory

1. wad_custom.txt is always being loaded! You should put any special texture information in here.
2. There is no double check for texture names. If there is a texture "wall1b" in wad_Your1stWad.txt it will
   be picked as the source of information, before the search reaches "wall1b" in wad_Your2ndWad.txt, which
   has a different size from the first texture and is actually the correct choice for this face.
   To minimize this issue, remove any unneeded txt-files (pack-folders) from the WAD directory and care
   for unique texture names in your wad files.

Map-File

1. Brushwork has to be horizontally aligned along the X-axis and can be anywhere on the map,
   but should be on the top side of the Y-axis. If some vertices of the map-brushes are below 0 on the Y axis,
   the source object will always be moved above 0 on the Y-axis for arc generation.
2. Cut faces have to be planar.
3. Slopes along the X-axis will lead to an invalid brush.
4. Texture Rotations other than 0, 90, 180, 270, etc. will be automatically aligned to "World".
5. There can be Solid Entities and World Brushes in a Map file.
6. Point entities are being ignored.
7. World texture alignment is being transformed to face alignment automatically.

GOOD TO KNOW

1. Resolutions for PI Circles are always divisible by 4. Everything else will be rounded by the program.
   At the moment the minimum resolution is 4.
2. Resolutions for GRID Circles must be 12, 24, 48, 96, 192 or 384 or the appropiate ID: 1(12)...6(384)

Construction Methods (Circles)

1. PI (pi)
   This uses pi to generate the contruction circles. This method will let you "arc" non-rectangular brushes
   (e.g. pipes), without the need of using triangles.

2. GRID
   This uses a special construction method, where the basic circle was rotated by 15 degrees, scaled to
   the nearest grid and then its vertices were snapped to the nearest grid. For a a 12-sided circle with
   a radius of 128, this gridsize would be 32. By doing this, the resulting arc brushes won't need any
   triangles to be planar either AND can even have integer coordinates, which can be handled a lot easier
   than floating point coordinates of course.

3. Simple Path Extrusion
   This uses a seperate path file (can be made in Hammer) to create a profile from it.
   Filenames must be like "mapname_path1.map", where 1 stands for the respective arc object ID.
   Further commands are "p_cornerfix", "p_split" and "p_reverse".









